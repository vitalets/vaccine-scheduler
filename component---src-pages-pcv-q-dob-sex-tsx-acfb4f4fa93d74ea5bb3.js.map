{"version":3,"file":"component---src-pages-pcv-q-dob-sex-tsx-acfb4f4fa93d74ea5bb3.js","mappings":"gSAgBe,SAASA,IACtB,OAAwBC,EAAAA,EAAAA,GAAgB,OAAhCC,EAAR,KAAaC,EAAb,KACA,GAAwBF,EAAAA,EAAAA,GAAgB,OAAhCG,EAAR,KAAaC,EAAb,KASA,OACE,gCACE,wBAAMC,SATS,SAACC,GAClBA,EAAMC,iBACFD,EAAME,cAAcC,mBACtBC,EAAAA,EAAAA,UATW,mBAgBX,gBAAC,KAAD,CAAMC,WAAS,EAACC,QAAS,GACrB,gBAAC,KAAD,CAAMC,MAAI,EAACC,GAAI,IACb,gBAAC,IAAD,CAAYC,QAAQ,KAAKC,GAAI,CAAEC,GAAI,IAAnC,mBACkB,2BADlB,wBAIF,gBAAC,KAAD,CAAMJ,MAAI,EAACC,GAAI,IACb,gBAAC,IAAD,CACEI,KAAK,MACLC,MAAM,gBACNC,MAAOnB,EACPoB,SAAU,SAAAC,GAAC,OAAIpB,EAAOoB,EAAEC,OAAOH,QAC/BI,UAAQ,EACRC,WAAS,EACTC,aAAa,MACbC,WAAY,CAAEC,QAAS,2BAA4BC,MAAO,cAC1DC,YAAY,gBAGhB,gBAAC,KAAD,CAAMjB,MAAI,EAACC,GAAI,IACb,gBAAC,IAAD,CAAaiB,UAAU,YACrB,gBAAC,IAAD,CAAWA,UAAU,UAArB,SACA,gBAAC,IAAD,CACEC,KAAG,EACH,aAAW,MACXd,KAAK,MACLE,MAAOjB,EACPkB,SAAU,SAAAC,GAAC,OAAIlB,EAAOkB,EAAEC,OAAOH,SAE/B,gBAAC,IAAD,CAAkBA,MAAM,OAAOa,QAAS,gBAAC,IAAD,CAAOT,UAAQ,IAAKL,MAAM,MAClE,gBAAC,IAAD,CAAkBC,MAAM,SAASa,QAAS,gBAAC,IAAD,CAAOT,UAAQ,IAAKL,MAAM,SAI1E,gBAAC,IAAD,CAAiBe,SAnDV,WAmD8BC,aAAa,S,yFCvDrD,SAASC,IACd,IAAQnC,EAAQD,EAAgB,OAAhC,GAEMqC,EAAiB,SADPrC,EAAgB,OAAhC,GAEMsC,EAkBR,SAAiBrC,GACf,MAA2BA,EAAIsC,MAAM,KAA9BC,EAAP,KAAYC,EAAZ,KAAmBC,EAAnB,KACMC,EAAQ,IAAIC,KACZC,EAAY,IAAID,KAAKE,OAAOJ,GAAOI,OAAOL,GAAS,EAAGK,OAAON,IAC/DF,EAAMK,EAAMI,cAAgBF,EAAUE,cACpCC,EAAYL,EAAMM,WAAaJ,EAAUI,YAC3CD,EAAY,GAAoB,IAAdA,GAAmBL,EAAMO,UAAYL,EAAUK,YAAYZ,IACjF,OAAOA,EAzBKa,CAAQlD,GACpB,MAAO,CACLoC,OAAAA,EACAC,IAAAA,GAIG,SAAStC,EAAgBoD,EAAwBC,QAAmB,IAAnBA,IAAAA,EAAe,IACrE,MAA4BC,EAAAA,UAAe,WACzC,IAAMC,EAAgC,oBAAXC,OAAyBA,OAAOC,aAAaC,QAAQN,GAAO,KACvF,OAAuB,OAAhBG,EAAuBA,EAAcF,KAFtCjC,EAAR,KAAeuC,EAAf,KAOA,OAHAL,EAAAA,WAAgB,WACI,oBAAXE,QAA0BA,OAAOC,aAAaG,QAAQR,EAAKhC,KACjE,CAAEgC,EAAKhC,IACH,CAAEA,EAAOuC","sources":["webpack://vaccine-scheduler/./src/pages/pcv/q-dob-sex.tsx","webpack://vaccine-scheduler/./src/utils.ts"],"sourcesContent":["import * as React from 'react';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport TextField from '@mui/material/TextField';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControl from '@mui/material/FormControl';\nimport FormLabel from '@mui/material/FormLabel';\nimport { useStorageState } from '../../utils';\nimport { navigate } from 'gatsby';\nimport PrevNextButtons from './_PrevNextButtons';\n\nconst prevPage = '../index';\nconst nextPage = '../q-free-vac';\n\nexport default function QDobSex() {\n  const [ dob, setDob ] = useStorageState('dob');\n  const [ sex, setSex ] = useStorageState('sex');\n\n  const handleNext = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (event.currentTarget.reportValidity()) {\n      navigate(nextPage);\n    }\n  };\n\n  return (\n    <>\n      <form onSubmit={handleNext}>\n      <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Typography variant=\"h5\" sx={{ mt: 2 }}>\n              Заполните данные<br /> (свои или ребенка)\n            </Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              name=\"dob\"\n              label=\"Дата рождения\"\n              value={dob}\n              onChange={e => setDob(e.target.value)}\n              required\n              autoFocus\n              autoComplete=\"off\"\n              inputProps={{ pattern: '\\\\d{2}\\\\.\\\\d{2}\\\\.\\\\d{4}', title: 'дд.мм.гггг' }}\n              placeholder=\"дд.мм.гггг\"\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <FormControl component=\"fieldset\">\n              <FormLabel component=\"legend\">Пол *</FormLabel>\n              <RadioGroup\n                row\n                aria-label=\"Пол\"\n                name=\"sex\"\n                value={sex}\n                onChange={e => setSex(e.target.value)}\n              >\n                <FormControlLabel value=\"male\" control={<Radio required />} label=\"М\" />\n                <FormControlLabel value=\"female\" control={<Radio required />} label=\"Ж\" />\n              </RadioGroup>\n            </FormControl>\n          </Grid>\n          <PrevNextButtons prevPage={prevPage} nextEnabled={true}/>\n      </Grid>\n      </form>\n    </>\n  );\n}\n\n\n","import * as React from 'react';\n\n// todo: move to storage.ts?\n\nexport interface StorageData {\n  dob: string;\n  sex: 'male' | 'female';\n}\n\nexport function useStorage() {\n  const [ dob ] = useStorageState('dob');\n  const [ sex ] = useStorageState('sex');\n  const isMale = sex === 'male';\n  const age = calcAge(dob);\n  return {\n    isMale,\n    age,\n  };\n}\n\nexport function useStorageState(key: keyof StorageData, defaultValue = '') {\n  const [ value, setValue ] = React.useState(() => {\n    const storedValue = typeof window !== \"undefined\" ? window.localStorage.getItem(key) : null;\n    return storedValue !== null ? storedValue : defaultValue;\n  });\n  React.useEffect(() => {\n    typeof window !== \"undefined\" && window.localStorage.setItem(key, value);\n  }, [ key, value ]);\n  return [ value, setValue ] as [ string, React.Dispatch<React.SetStateAction<string>> ];\n}\n\nfunction calcAge(dob: string) {\n  const [day, month, year] = dob.split('.');\n  const today = new Date();\n  const birthDate = new Date(Number(year), Number(month) - 1, Number(day));\n  let age = today.getFullYear() - birthDate.getFullYear();\n  const monthDiff = today.getMonth() - birthDate.getMonth();\n  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) age--;\n  return age;\n}\n"],"names":["QDobSex","useStorageState","dob","setDob","sex","setSex","onSubmit","event","preventDefault","currentTarget","reportValidity","navigate","container","spacing","item","xs","variant","sx","mt","name","label","value","onChange","e","target","required","autoFocus","autoComplete","inputProps","pattern","title","placeholder","component","row","control","prevPage","nextEnabled","useStorage","isMale","age","split","day","month","year","today","Date","birthDate","Number","getFullYear","monthDiff","getMonth","getDate","calcAge","key","defaultValue","React","storedValue","window","localStorage","getItem","setValue","setItem"],"sourceRoot":""}